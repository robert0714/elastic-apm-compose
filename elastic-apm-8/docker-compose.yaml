version: "3.2"
services:
  setup:
    image: docker.elastic.co/elasticsearch/elasticsearch:${ELK_VERSION}
    container_name: setup
    volumes:
      - certs:/usr/share/elasticsearch/config/certs
    user: "0"
    command: >
      bash -c '
        if [ x${ELASTIC_PASSWORD} == x ]; then
          echo "Set the ELASTIC_PASSWORD environment variable in the .env file";
          exit 1;
        elif [ x${KIBANA_PASSWORD} == x ]; then
          echo "Set the KIBANA_PASSWORD environment variable in the .env file";
          exit 1;
        fi;
        if [ ! -f certs/ca.zip ]; then
          echo "Creating CA";
          bin/elasticsearch-certutil ca --silent --pem -out config/certs/ca.zip;
          unzip config/certs/ca.zip -d config/certs;
        fi;
        if [ ! -f certs/certs.zip ]; then
          echo "Creating certs";
          echo -ne \
          "instances:\n"\
          "  - name: elasticsearch\n"\
          "    dns:\n"\
          "      - elasticsearch\n"\
          "      - localhost\n"\
          "    ip:\n"\
          "      - 127.0.0.1\n"\
          "  - name: kibana\n"\
          "    dns:\n"\
          "      - kibana\n"\
          "      - localhost\n"\
          "    ip:\n"\
          "      - 127.0.0.1\n"\
          "  - name: fleet-server\n"\
          "    dns:\n"\
          "      - fleet-server\n"\
          "      - localhost\n"\
          "    ip:\n"\
          "      - 127.0.0.1\n"\
          > config/certs/instances.yml;
          bin/elasticsearch-certutil cert --silent --pem -out config/certs/certs.zip --in config/certs/instances.yml --ca-cert config/certs/ca/ca.crt --ca-key config/certs/ca/ca.key;
          unzip config/certs/certs.zip -d config/certs;
        fi;
        echo "Setting file permissions"
        chown -R root:root config/certs;
        find . -type d -exec chmod 750 \{\} \;;
        find . -type f -exec chmod 640 \{\} \;;
        echo "Waiting for Elasticsearch availability";
        until curl -s --cacert config/certs/ca/ca.crt https://elasticsearch:9200 | grep -q "missing authentication credentials"; do sleep 30; done;
        echo "Setting kibana_system password";
        until curl -s -X POST --cacert config/certs/ca/ca.crt -u elastic:${ELASTIC_PASSWORD} -H "Content-Type: application/json" https://elasticsearch:9200/_security/user/kibana_system/_password -d "{\"password\":\"${KIBANA_PASSWORD}\"}" | grep -q "^{}"; do sleep 10; done;
        echo "All done!";
      '
    healthcheck:
      test: ["CMD-SHELL", "[ -f config/certs/elasticsearch/elasticsearch.crt ]"]
      interval: 1s
      timeout: 5s
      retries: 120
    networks:
      - tracing
  elasticsearch:
    image: docker.elastic.co/elasticsearch/elasticsearch:${ELK_VERSION}
    container_name: elasticsearch
    depends_on:
      setup:
        condition: service_healthy 
    environment:
      - ES_JAVA_OPTS=${ES_JAVA_OPTS}
      - TZ=${TIME_ZONE}
      # Password for the 'elastic' user (at least 6 characters)
      - ELASTIC_PASSWORD=${ELASTIC_PASSWORD:-}
      # Password for the 'kibana_system' user (at least 6 characters)
      # https://www.elastic.co/guide/en/elasticsearch/reference/current/security-api-change-password.html
      - KIBANA_PASSWORD=${KIBANA_PASSWORD:-}
      - cluster.name=docker-cluster
      - discovery.type=single-node
      - bootstrap.memory_lock=true
      - network.host=0.0.0.0
      - http.host=0.0.0.0
      - xpack.security.enabled=true
      - xpack.security.http.ssl.enabled=true
      - xpack.security.http.ssl.key=certs/elasticsearch/elasticsearch.key
      - xpack.security.http.ssl.certificate=certs/elasticsearch/elasticsearch.crt
      - xpack.security.http.ssl.certificate_authorities=certs/ca/ca.crt
      - xpack.security.http.ssl.verification_mode=certificate
      - xpack.security.transport.ssl.enabled=true
      - xpack.security.transport.ssl.key=certs/elasticsearch/elasticsearch.key
      - xpack.security.transport.ssl.certificate=certs/elasticsearch/elasticsearch.crt
      - xpack.security.transport.ssl.certificate_authorities=certs/ca/ca.crt
      - xpack.security.transport.ssl.verification_mode=certificate
      # - xpack.security.authc.api_key.enabled=true
    ulimits:
      memlock:
        soft: -1
        hard: -1  
    ports:
      - "9200:9200"
      - "9300:9300"
    healthcheck:
      test:
        [
          "CMD-SHELL",
          "curl -s --cacert config/certs/ca/ca.crt https://localhost:9200 | grep -q 'missing authentication credentials'",
        ]
      interval: 10s
      timeout: 10s
      retries: 120
    volumes:
     - certs:/usr/share/elasticsearch/config/certs
      # - ./data/elasticsearch:/usr/share/elasticsearch/data
    networks:
      - tracing
  kibana:
    image: docker.elastic.co/kibana/kibana:${ELK_VERSION}
    container_name: kibana
    depends_on:
      elasticsearch:
        condition: service_healthy
    environment:
      - SERVERNAME=kibana
      - ES_JAVA_OPTS=${ES_JAVA_OPTS}
      - TZ=${TIME_ZONE}
      - ELASTICSEARCH_HOSTS=https://elasticsearch:9200 
      - ELASTICSEARCH_USERNAME=${KIBANA_USERNAME}
      - ELASTICSEARCH_PASSWORD=${KIBANA_PASSWORD}
      - ELASTICSEARCH_SSL_CERTIFICATEAUTHORITIES=config/certs/ca/ca.crt
      - XPACK_SECURITY_ENCRYPTIONKEY=${ENCRYPTION_KEY}
      - XPACK_ENCRYPTEDSAVEDOBJECTS_ENCRYPTIONKEY=${ENCRYPTION_KEY}
      - XPACK_REPORTING_ENCRYPTIONKEY=${ENCRYPTION_KEY}
      - XPACK_REPORTING_KIBANASERVER_HOSTNAME=localhost 
      # - SERVER_SSL_ENABLED=true
      # - SERVER_SSL_CERTIFICATE=/usr/share/kibana/config/certs/kibana/kibana.crt
      # - SERVER_SSL_KEY=/usr/share/kibana/config/certs/kibana/kibana.crt
      # - SERVER_SSL_CERTIFICATEAUTHORITIES=config/certs/ca/ca.crt
      # - ELASTIC_APM_SECRET_TOKEN=${ELASTIC_APM_SECRET_TOKEN} 
      - NODE_OPTIONS=''
    ulimits:
      memlock:
        soft: -1
        hard: -1  
    ports:
      - "5601:5601"
    volumes:
      - certs:/usr/share/kibana/config/certs
      # - ./config/kibana/kibana.yml:/usr/share/kibana/config/kibana.yml
      # - ./data/kibana:/usr/share/kibana/data
    healthcheck:
      test:
        [
          "CMD-SHELL",
          "curl -I -s --cacert config/certs/ca/ca.crt http://localhost:5601 | grep -q 'HTTP/1.1 302 Found'",
        ]
      interval: 10s
      timeout: 10s
      retries: 120
    mem_limit: ${MEM_LIMIT}  
    networks:
      - tracing
    
  fleet-server:
    image: docker.elastic.co/beats/elastic-agent:${ELK_VERSION}
    container_name: fleet-server
    depends_on:
      kibana:
        condition: service_healthy
      elasticsearch:
        condition: service_healthy  
    user: root
    environment:
        - FLEET_ENROLL=1
        - FLEET_SERVER_POLICY_ID=fleet-server-policy
        - FLEET_SERVER_ENABLE=1
        - KIBANA_FLEET_SETUP=1
        - KIBANA_HOST=http://kibana:5601
        - FLEET_URL=https://fleet-server:8220
        - FLEET_SERVER_ELASTICSEARCH_HOST=https://elasticsearch:9200
        - FLEET_CA=/certs/ca/ca.crt
        - KIBANA_FLEET_USERNAME=elastic
        - KIBANA_FLEET_PASSWORD=${ELASTIC_PASSWORD}
        - FLEET_SERVER_CERT=/certs/fleet-server/fleet-server.crt
        - FLEET_SERVER_CERT_KEY=/certs/fleet-server/fleet-server.key
        - FLEET_SERVER_ELASTICSEARCH_CA=/certs/ca/ca.crt
        - KIBANA_FLEET_CA=/certs/ca/ca.crt
    ports:
      - "8220:8220"
    networks:
      - tracing
    volumes:
      - certs:/certs:z
    healthcheck:
      test: [ "CMD-SHELL", "curl -f https://127.0.0.1:8220/api/status | grep HEALTHY 2>&1 >/dev/null" ]
      interval: 5s
      timeout: 10s
      retries: 120
  # https://www.elastic.co/guide/en/fleet/current/elastic-agent-container.html  
  agent01:
    image: docker.elastic.co/beats/elastic-agent:${ELK_VERSION}
    container_name: agent01
    user: root
    environment:
      - FLEET_ENROLLMENT_TOKEN=UWh2eEdaQUJ1MVRCNzFaWjAtTEQ6MXRKU2prdE1UWHlpSlBfM3MwX0lPdw== #must edit
      - FLEET_ENROLL=1
      - FLEET_URL=https://fleet-server:8220
      # - FLEET_INSECURE=true
    ports:
      - "8200:8200"
    networks:
      - tracing
    depends_on:
      fleet-server:
        condition: service_healthy
networks:
  tracing:
    driver: bridge
volumes:
  certs:
    driver: local    

# https://blog.elliot.tw/?p=597
# https://github.com/elastic/elasticsearch/blob/8.14/docs/reference/setup/install/docker/docker-compose.yml
# https://www.elastic.co/blog/getting-started-with-the-elastic-stack-and-docker-compose-part-2
# https://github.com/elkninja/elastic-stack-docker-part-two